; demoT.a: Demonstrating bitwise operations and, or, xor
;
; This program shows how to use bitwise operations for masking and modifying bits.
; We use dout and hout to display the results.

        ; Initialize r0 with a value
        mov r0, 0xAA    ; r0 = 0x00AA

        ; Use AND to clear bits (masking)
        mov r1, 0xF0    ; Mask to keep only the upper 4 bits
        and r2, r0, r1  ; r2 = r0 & r1
        hout r2         ; Output: 00A0
        nl

        ; Use OR to set bits
        mov r1, 0xF     ; Mask to set lower 4 bits
        or r0, r1       ; r0 = r0 | r1
        hout r0         ; Output: 00AF
        nl

        ; Use XOR to toggle bits
        mov r1, 0xFF    ; Mask to toggle all bits
        xor r0, r1      ; r0 = r0 ^ r1
        hout r0         ; Output: 50  
        nl

        ; Practical example: Checking if bit 3 is set (bit indexing from 0)
        ; Let's check if bit 3 (from LSB) is set in r0
        mov r1, 0x8     ; Mask for bit 3
        and r2, r0, r1
        cmp r2, 0
        bre bit_not_set
        lea r3, msg_set
        sout r3         ; Output: "Bit 3 is set"
        br end_msg
bit_not_set:
        lea r3, msg_not_set
        sout r3         ; Output: "Bit 3 is not set"
end_msg:
        nl

        halt

msg_set:     .string "Bit 3 is set"
msg_not_set: .string "Bit 3 is not set"

; Practical applications:
; - **AND** is used for masking bits to clear or check specific bits.
; - **OR** is used for setting specific bits without altering others.
; - **XOR** is used for toggling bits and is fundamental in encryption algorithms.
; - Bit manipulation is crucial in low-level programming, embedded systems, and optimization tasks.
