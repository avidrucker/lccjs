LCC Assemble/Link/Interpret/Debug Ver 6.3  Sat Oct 25 10:49:02 2025
TestUser

Header
o
C

Loc   Code           Source Code
           ; demoR.a: Demonstrating shift commands srl, sra, sll
           ;
           ; This program shows the effects of shifting operations 
           ; on positive and negative numbers.
           ; We use dout to display the results and nl for new line

                   ; Initialize r0 with a positive number
0000  d010         mov r0, 16      ; r0 = 16 (binary 0000 0000 0001
                   ; Shift r0 right logically by 1 (divide by 2, ze
0001  a022         srl r0, 1       ; r0 = r0 >> 1 (logical shift ri
                   ; After srl, r0 should be 8 (binary 0000 0000 00
0002  f002         dout r0         ; Output: 8
0003  f001         nl

                   ; Initialize r1 with a negative number
0004  d3f0         mov r1, -16     ; r1 = -16 (binary 1111 1111 111
                   ; Shift r1 right logically by 1 (zeros shifted i
0005  a222         srl r1, 1       ; r1 = r1 >> 1 (logical shift ri
                   ; After srl, r1 becomes a large positive number 
0006  f202         dout r1         ; Output: 32760
0007  f001         nl

                   ; Now shift r1 right arithmetically by 1 (sign b
0008  d3f0         mov r1, -16     ; Reset r1 to -16
0009  a223         sra r1, 1       ; r1 = r1 >> 1 (arithmetic shift
                   ; After sra, r1 remains negative
000a  f202         dout r1         ; Output: -8
000b  f001         nl

                   ; Shift r0 left logically by 1 (multiply by 2)
000c  d010         mov r0, 16      ; Reset r0 to 16
000d  a024         sll r0, 1       ; r0 = r0 << 1 (logical shift le
                   ; After sll, r0 should be 32 (binary 0000 0000 0
000e  f002         dout r0         ; Output: 32
000f  f001         nl

                   ; Demonstrate that shifting left multiplies by p
                   ; Shift r0 left by 2 (multiply by 4)
0010  d003         mov r0, 3       ; r0 = 3
0011  a044         sll r0, 2       ; r0 = r0 << 2
                   ; After sll, r0 should be 12 (3 * 4)
0012  f002         dout r0         ; Output: 12
0013  f001         nl

0014  f000         halt

           ; Practical applications:
           ; - Left shift (`sll`) is used for fast multiplication b
           ;   powers of 2.
           ; - Right shift (`sra`) is used for division by powers o
           ;   2 while preserving the sign.
           ; - Logical right shift (`srl`) is useful for unsigned 
           ;   binary arithmetic and bit manipulation.
====================================================== Output
8
32760
-8
32
12

========================================== Program statistics
Input file name       =      demoR1.a
Instructions executed =   15 (hex)    21 (dec)
Program size          =   15 (hex)    21 (dec)
Max stack size        =    0 (hex)     0 (dec)
Load point            =    0 (hex)     0 (dec)
